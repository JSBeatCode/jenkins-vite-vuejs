1. jenkins 설치
    java 11 or 17 or 21 설치
    jenkins msi download
    설치 전 설정: https://yyjing.tistory.com/94 (사용자(컴퓨터 사용자): jsd / qwer1234)
    설치하면서 port번호 지정: 8909
    localhost:8909 접속
    빨간줄 열어서 crendential key 입력: C:\Users\jsd\AppData\Local\Jenkins\.jenkins\secrets\initialAdminPassword
    필요한 플로그인 설치 클릭

2. github 생성
    git repository 생성
    프로젝트 생성
        git init
        git add .
        git commit -m "first commit"
        git branch -M main
        git remote add origin https://github.com/JSBeatCode/jenkins-vite-vuejs.git
        git push -u origin main

3. github access key 생성
    https://github.com/settings/tokens
    or
    github -> settings -> developer settings -> Personal access tokens

    해당 페이지에서 Generate new token 클릭
    token 이름 설정 후 repo, admin_hook 을 체크하고 Generate token 을 클릭합니다.

4. jenkins에서 아까 github personal access key 생성한 것으로 credential 추가: 
	credentials > system > global credentials > add credentials 
	> 설정:
        - kind: Username with password
	 - Scope : Global credentials (unrestricted) 선택
	 - Username: github 계정명
	 - Password : 위에서 생성한 Personal Access 토큰 입력
	 - ID : 본인이 지정하는 식별자(ID) 입력
5. ngrok 설치:
	> window 버전 다운로드 후 압축풀기 
	> ngrok.exe 실행
	> ngrok config add-authtoken <TOKEN>
	> 로그인 후 ngrok http http://localhost:8909
	
6. ngrok로 나온 url을 복사 > github repository의 webhook에 add webhook > [복사한 url]/github-hook 추가, application/json으로 설정 > 설정탭에서 ping 되나 확인
6-1. 플젝path > cmd > npm install -g pm2 > npm i express cors
6-2. index.cjs 코딩
	const express = require('express');
	const cors = require('cors');
	const path = require('path')
	const app = express()
	
	app.use(express.json())
	app.use(cors())
	app.use(express.static(path.join(__dirname, 'dist')));
	
	app.get('/', (req, res) => {
	    res.sendFile(path.join(__dirname, 'dist', 'index.html'))
	})
	
	// 젠킨스 실행을 위한 커밋2
	
	app.listen(7771, () => {
	    console.log('Server Started 7771')
	})
6-3. pm2 start index.cjs
7. git repository에 제일 상단 구조에 'Jenkinsfile'이란 이름의 파일(확장자 없음, 이름 대소문자 그대로)을 생성하고 안에 pipescript 작성(window cmd 용으로 작성: bat, pm2)
	pipeline {
	    agent any
	
	    stages {
	        stage('Checkout') {
	            steps {
	                //Git 저장소에서 소스코드를 가져옵니다.
	                git branch: 'main', credentialsId: 'github_token', url: 'https://github.com/JSBeatCode/jenkins-tuto.git'
	            }
	        }
	
	        stage('Install Dependencies') {
	            steps {
	                // npm을 사용하여 종속성을 설치합니다.
	                // sh 'npm install'
	                bat 'cd 플젝 전체 폴더 로컬path && npm install'
	            }
	        }
	
	        stage('Build') {
	            steps {
	                // 빌드 스크립트를 실행합니다.
	                // 예시: 프로덕션 환경에 맞게 빌드 스크립트를 수정
	                bat 'cd 플젝 전체 폴더 로컬path && npm run build'
	            }
	        }
	
	        stage('Deploy') {
	            steps {
	                // 배포 스크립트를 실행합니다.
	                // 예시: 배포 스크립트를 프로젝트 필요에 따라 수정
	                bat 'cd 플젝 전체 폴더 로컬path && npx pm2 reload index.cjs'
	            }
	        }
	    }
	}
8. jenkins 대시보드 > create new job > pipeline으로 생성 > GitHub project체크 및 주소입력 > GitHub hook trigger for GITScm polling 체크 > Pipeline 대분류 > Difinition: Pipeline script from SCM > SCM: Git > Repositories: URL 입력, Credentials에 아까만든 credentials연동 > Branches to build: 실제 git에 있는 브렌치로 > Script Path: 7번의 Jenkinsfile  (git url, credential, branch(main으로) 등 설정) > 저장
9. code commit
10. jenkins build 되는것 확인
11. 웹 접속
